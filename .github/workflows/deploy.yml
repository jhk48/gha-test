name: Deploy application

on:
  push

jobs:
  deploy_webapp:
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'frontend')
    runs-on: ubuntu-latest
    env:
      wd: ./packages/webapp

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install lerna
        run: yarn global add lerna

      - name: Cache node modules
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install All Dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: lerna bootstrap

      - name: Create env file
        run: |
          touch .env
          echo API_SERVER_URL=${{ secrets.API_SERVER_URL }} >> .env
          echo SOCKET_SERVER_URL=${{ secrets.SOCKET_SERVER_URL }} >> .env
          echo AVATAR_IMAGE_BASE_URL=${{ secrets.AVATAR_IMAGE_BASE_URL }} >> .env
          echo OAUTH_REDIRECT_BASE_URL=${{ secrets.OAUTH_REDIRECT_BASE_URL }} >> .env
          echo GOOGLE_OAUTH_BASE_URL=${{ secrets.GOOGLE_OAUTH_BASE_URL }} >> .env
          echo GOOGLE_OAUTH_SCOPE=${{ secrets.GOOGLE_OAUTH_SCOPE }} >> .env
          echo GOOGLE_OAUTH_CLIENT_ID=${{ secrets.GOOGLE_OAUTH_CLIENT_ID }} >> .env
          echo GOOGLE_OAUTH_CLIENT_SECRET=${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }} >> .env
        working-directory: ${{ env.wd }}

      - name: Build webapp
        run: yarn build
        working-directory: ${{ env.wd }}

      - name: Finalize deploying webapp
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_SECRET }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws cloudfront create-invalidation --distribution-id="${{ secrets.CLOUDFRONT_ID }}" --paths="/index.html"
          aws s3 cp dist s3://${{ secrets.WEBAPP_BUCKET_NAME }} --recursive --exclude="*" --include="*.html" --cache-control="s-maxage=31536000, max-age=0"
          aws s3 cp dist s3://${{ secrets.WEBAPP_BUCKET_NAME }} --recursive --exclude="*.html" --cache-control="max-age=31536000"
        working-directory: ${{ env.wd }}

  deploy_api_server:
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'backend')
    runs-on: ubuntu-latest
    env:
      wd: ./packages/server

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set short commit hash
        id: vars
        run: echo "::set-output name=short_commit_hash::$(git rev-parse --short HEAD)"

      - name: Install lerna
        run: yarn global add lerna

      - name: Cache node modules
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      
      - name: Deploy i18n asset files
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-northeast-2
        run: |
          aws s3 cp i18n-assets s3://ronnie.test/locales/${{ env.DEPLOY_VERSION }} --recursive

      - name: Create env file
        run: |
          touch .env
          echo PORT=${{ secrets.PORT }} >> .env
          echo REDIS_HOST=${{ secrets.REDIS_HOST }} >> .env
          echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> .env
          echo COOKIE_DOMAIN=${{ secrets.COOKIE_DOMAIN }} >> .env
          echo MAX_COOKIE_AGE=${{ secrets.MAX_COOKIE_AGE }} >> .env
          echo ORIGIN=${{ secrets.ORIGIN }} >> .env
          echo OAUTH_REDIRECT_BASE_URL=${{ secrets.OAUTH_REDIRECT_BASE_URL }} >> .env
          echo SOCKET_SERVER_URL=${{ secrets.SOCKET_SERVER_URL }} >> .env
          echo SESSION_ID_TTL_IN_SEC=${{ secrets.SESSION_ID_TTL_IN_SEC }} >> .env
          echo GOOGLE_OAUTH_CLIENT_ID=${{ secrets.GOOGLE_OAUTH_CLIENT_ID }} >> .env
          echo GOOGLE_OAUTH_CLIENT_SECRET=${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }} >> .env
          echo GOOGLE_POSTMAN_SECRET=${{ secrets.GOOGLE_POSTMAN_SECRET }} >> .env
          echo AWS_IDENTITY_POOL_ID=${{ secrets.AWS_IDENTITY_POOL_ID }} >> .env
          echo AWS_REGION=${{ secrets.AWS_REGION }} >> .env
          echo AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }} >> .env
        working-directory: ${{ env.wd }}

      - name: Create .pem files
        run: |
          touch public.pem
          touch private.pem
          echo "${{ secrets.API_SERVER_PUBLIC_KEY }}" >> public.pem
          echo "${{ secrets.API_SERVER_PRIVATE_KEY }}" >> private.pem
        working-directory: ${{ env.wd }}

